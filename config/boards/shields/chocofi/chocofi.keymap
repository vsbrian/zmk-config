#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define EXT  1
#define NAV  2
#define FUN  3
#define ADJ  4// macros definition
#define undo LC(Z)
#define redo LC(LS(Z))
#define prev_screen LC(LG(LEFT))
#define next_screen LC(LG(RIGHT))
#define meh LC(LS(LALT))
#define prev_win LA(TAB)
#define next_win LA(LS(TAB))
#define deg RA(LS(SEMI))// tune mod tap

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// caps word settings

&caps_word {
    continue-list = <UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// main tree

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV FUN>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
        // HOME ROW MODS

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;// <---[[right-hand keys]]
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;// <---[[right-hand keys]]
        };
        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;// <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&sk>,
                <&kp>;
        };

        // TAP DANCES

        bslhpipe: tap_dance_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKSLASH_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp BSLH>,
                <&kp PIPE>;
        };
        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };
        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };
        eurodollar: tap_dance_euro_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp RA(N5)>,
                <&kp DLLR>;
        };
        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LC(F4)>,
                <&kp LA(F4)>;
        };
    };

    // macros

    macros {
        sel_word: select_word {
            label = "ZM_SELECT_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL>;
        };
    };

    // combos for accents dead keys (for US_intl_altgr_deadkeys OS layout)

    combos {
        compatible = "zmk,combos";

        combo_acc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
        };

        combo_grv {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp RA(GRAVE)>;
        };

        combo_delwrd {
            bindings = <&kp LA(DEL)>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // |    Q    |    W    |    F    |    P    |    B    |                      |    J    |    L    |    I    |    Y    |    ;    |
            // |    A    |    R    |    S    |    T    |    G    |                      |    M    |    N    |    E    |    I    |    O    |
            // |    Z    |    X    |    C    |    D    |    V    |                      |    K    |    H    |    ,    |    .    |    /    |
            //                               |   ESC   |  SPACE  |   TAB   |  |  RETURN |BACKSPACE|   DEL   |

            bindings = <
  &kp Q   &kp W     &kp F      &kp P            &kp B      &kp J       &kp L         &kp U    &kp Y  &kp BACKSPACE
  &kp A   &kp R     &kp S      &kp T            &kp G      &kp M       &kp N         &kp E    &kp I          &kp O
  &kp Z   &kp X     &kp C      &kp D            &kp V      &kp K       &kp H     &kp COMMA  &kp DOT       &kp FSLH
                 &kp LGUI  &kp SPACE  &lt 1 LG(LA(D))  &lt 2 TAB  &kp RSHIFT  &kp LEFT_ALT
            >;
        };

        num_layer {
            bindings = <
   &kp ESC        &kp HOME          &kp UP          &kp END    &kp UNDER  &kp MINUS  &kp N7      &kp N8  &kp N9    &grvtilde
   &kp TAB  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LA(TAB)  &kp EQUAL  &kp N4      &kp N5  &kp N6    &apoquote
 &kp LG(Z)       &kp LG(X)       &kp LG(C)    &kp RS(LG(Z))    &bslhpipe   &kp PLUS  &kp N1      &kp N2  &kp N3  &eurodollar
                                     &none            &none       &trans      &mo 3  &kp N0  &kp PERIOD
            >;
        };

        sym_layer {
            bindings = <
 &grvtilde  &kp EXCLAMATION                 &kp AT           &kp HASH      &kp PERCENT       &kp CARET          &kp AMPS           &kp STAR  &kp SEMICOLON  &kp COLON
     &none   &kp LEFT_ARROW   &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LEFT_BRACE           &none     &kp LG(SPACE)              &none          &none  &kp ENTER
  &kp CAPS            &none  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp LG(LS(N4))  &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))          &none      &none
                                             &none              &none            &mo 3          &trans             &none              &none
            >;
        };

        fun_layer {
            bindings = <
  &none  &kp F7  &kp F8  &kp F9  &kp F10  &kp C_VOL_UP    &kp C_PREVIOUS  &kp C_NEXT   &none   &kp C_BRI_UP
  &none  &kp F4  &kp F5  &kp F6  &kp F11  &kp C_VOL_DN  &kp C_PLAY_PAUSE       &none   &none   &kp C_BRI_DN
  &none  &kp F1  &kp F2  &kp F3  &kp F12         &none             &none       &none   &none  &kp C_BRI_MIN
                  &none   &none   &trans        &trans             &none       &none
            >;
        };
    };
};
